from django.http import HttpResponse

from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Frame, PageTemplate
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus.flowables import PageBreak

from django.db.models import Q
from io import BytesIO
from expensense.models import Expense
from django.utils import timezone


def generate_pdf(request, start_date, end_date):
    """ Method to generate pdf """
    # get the expense for specefic timeframe, company and role

    if request.user.role == 'ADM':
        expenses = Expense.objects.filter(user_id__company=request.user.company,
                                            expense_date__gte=start_date,
                                            expense_date__lte=end_date).order_by('-expense_date')
    elif request.user.role == 'MNG':
        query_1 = Q(user_id__company=request.user.company)
        query_2 = Q(user_id__team=request.user.team)
        expenses = Expense.objects.filter(Q(query_1 & query_2),
                                            expense_date__gte=start_date,
                                            expense_date__lte=end_date).order_by('-expense_date')
    elif request.user.role == 'EMP':
        expenses = Expense.objects.filter(user_id=request.user,
                                            expense_date__gte=start_date,
                                            expense_date__lte=end_date).order_by('-expense_date')


    buffer = BytesIO()

    # Create a pdf document using reportlab
    doc = SimpleDocTemplate(buffer, pagesize=A4)


    def footer(canvas, doc):
        """ Method to create a footer with footer text and page number"""
        page_number = canvas.getPageNumber()
        footer_style = ParagraphStyle('FooterStyle')
        footer_style.textColor = colors.gray
        footer_style.alignment = 1
        footer_text = "Generated by ExpenSense - All rights reserved"
        p = Paragraph(footer_text, footer_style)
        w, h = p.wrap(doc.width, doc.bottomMargin)
        p.drawOn(canvas, doc.leftMargin, 0.75 * inch)
        canvas.drawString(7 * inch, 0.75 * inch, f"Page {page_number}")
    
    # Create a Frame for the body content and set the footer function for the PageTemplate
    body_frame = Frame(doc.leftMargin, doc.topMargin, doc.width, doc.height, id='body')
    body_template = PageTemplate(id='body_template', frames=[body_frame], onPage=footer)
    doc.addPageTemplates([body_template])

    # Create a Frame for the footer
    footer_frame = Frame(doc.leftMargin, doc.bottomMargin - 1.5 * inch, doc.width, inch, id='footer')
    footer_template = PageTemplate(id='footer_template', frames=[footer_frame], onPage=footer)
    doc.addPageTemplates([footer_template])

    # Create a table to display expenses
    data = [['S. No','Expense Date', 'Expense Name',
                'Amount','Category', 'Expense By', 'Status']]
    

    # loop through the expense queryset and append it in the data list
    for index, expense in enumerate(expenses):
        data.append([str(index+1), expense.expense_date.strftime("%d/%m/%Y"), expense.expense_name, str(
            expense.amount), expense.category, expense.user_id.username, expense.get_status_display()])

    # set the table styles
    custom_background_color = colors.HexColor('#234E70')
    table = Table(data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), custom_background_color),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.white),
        ('GRID', (0, 0), (-1, -1), 1, colors.black)
    ]))


    elements = []
    styles = getSampleStyleSheet()

    # Title
    elements.append(Paragraph("Expense Report", styles['Title']))
    elements.append(Spacer(1, 20))

    # detail paragraph
    company = request.user.company
    elements.append(Paragraph(f'<b>Company Name:</b> {company.company}'))
    elements.append(Paragraph(f'<b>Start Date:</b> {start_date.strftime("%d/%m/%Y")}'))
    elements.append(Paragraph(f'<b>End Date:</b> {end_date.strftime("%d/%m/%Y")}'))
    elements.append(Paragraph(f'<b>Date Generated:</b> {timezone.now().strftime("%d/%m/%Y")}'))
    elements.append(Paragraph(f'<b>Generated By:</b> {request.user.first_name} {request.user.last_name}'))
    elements.append(Spacer(1, 20))

    # table
    elements.append(table)
    elements.append(Spacer(1, 20))

    # build the docuement
    doc.build(elements)

    buffer.seek(0)

    # Create a response object
    response = HttpResponse(buffer, content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="expense_report_{start_date}_{end_date}.pdf'

    return response